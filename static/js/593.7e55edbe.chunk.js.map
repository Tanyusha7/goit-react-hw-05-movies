{"version":3,"file":"static/js/593.7e55edbe.chunk.js","mappings":"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","sources":["Services/Api.jsx","components/Container/Container.styled.js","components/Link/Link.styled.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/SectionMain/SectionMain.styled.js","components/Text/Text.styled.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '3fd15b48446eede94fd21b39e1e3acac';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\nconst BASE_URL2 = 'https://api.themoviedb.org/3/search/movie';\nconst BASE_URL3 = 'https://api.themoviedb.org/3/movie/';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`${BASE_URL}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL2}?query=${query}&api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieById = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL3}${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getCastOfMovie = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL3}${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getReviewsOfMovie = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL3}${movie_id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  padding: 10px 20px;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkInfo = styled(Link)`\n  color: darkblue;\n  &:hover {\n    color: blue;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding-left: 20px;\n  display: flex;\n  flex-direction: column;\n  column-gap: 20px;\n  font-size: 18px;\n  line-height: 1.33;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nimport { List } from './MoviesList.styled';\nimport { LinkInfo } from 'components/Link/Link.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <List>\n        {movies &&\n          movies.map(({ title, id }) => {\n            return (\n              <li key={id}>\n                <LinkInfo\n                  to={`/movies/${id}`}\n                  state={{ from: location }}\n                  key={id}\n                >\n                  {title}\n                </LinkInfo>\n              </li>\n            );\n          })}\n      </List>\n    </>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const SectionMain = styled.section`\n  padding: 30px 0;\n`;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  margin-top: 20px;\n  padding-left: 10px;\n  color: red;\n  font-size: 18px;\n  line-height: 1.33;\n`;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-bottom: 30px;\n  padding-left: 20px;\n  font-size: 16px;\n  line-height: 1;\n`;\n\nexport const InputForm = styled.input`\n  padding: 10px 6px;\n  border-radius: 8px;\n  width: 300px;\n  border: 1px solid brown;\n  margin-right: 16px;\n`;\nexport const BtnForm = styled.button`\n  width: 100px;\n  padding: 6px 6px;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: white;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, InputForm, BtnForm } from './SearchForm.styled';\n\nconst SearchForm = ({ onSearchMovie, setSearchParams }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = ({ target: { value } }) => {\n    setQuery(value.toLowerCase().trim());\n    setSearchParams({ query: value });\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if (query === '') {\n      return alert('Enter a search name');\n    }\n    onSearchMovie(query);\n    setQuery('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmitForm}>\n      <InputForm\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={query}\n      />\n      <BtnForm type=\"submit\">Search</BtnForm>\n    </Form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSearchMovie: PropTypes.func.isRequired,\n  setSearchParams: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ThreeDots } from 'react-loader-spinner';\n\nimport { getMoviesByQuery } from 'Services/Api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { Text } from 'components/Text/Text.styled';\nimport { SectionMain } from 'components/SectionMain/SectionMain.styled';\nimport { Container } from 'components/Container/Container.styled';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(() => searchParams.get('query') ?? '');\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    const getMoviesBySearchQuery = async query => {\n      setIsLoading(true);\n      try {\n        const { results } = await getMoviesByQuery(query);\n\n        if (results.length === 0) {\n          setIsEmpty(true);\n        } else {\n          setIsEmpty(false);\n        }\n\n        setMovies(results);\n        setIsLoading(false);\n        setError(null);\n      } catch (error) {\n        setError(error.message || error.code);\n      }\n    };\n    getMoviesBySearchQuery(query);\n  }, [query]);\n\n  const handleSearchMovie = searchName => {\n    setQuery(searchName);\n  };\n\n  return (\n    <SectionMain>\n      <Container>\n        <SearchForm\n          onSearchMovie={handleSearchMovie}\n          setSearchParams={setSearchParams}\n        />\n        {isLoading && (\n          <ThreeDots\n            height=\"10\"\n            width=\"300\"\n            radius=\"9\"\n            color=\"#370f9b\"\n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{}}\n            wrapperClassName=\"\"\n            visible={true}\n          />\n        )}\n        {error && <Text>Ups... Something went wrong - {error}!</Text>}\n        {isEmpty ? (\n          <Text>\n            Sorry. We didn`t find nothing by your search query, try again!\n          </Text>\n        ) : (\n          <MoviesList movies={movies} />\n        )}\n      </Container>\n    </SectionMain>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","BASE_URL3","getTrendingMovies","axios","data","getMoviesByQuery","query","getMovieById","movie_id","getCastOfMovie","getReviewsOfMovie","Container","styled","LinkInfo","Link","List","movies","location","useLocation","map","title","id","to","state","from","SectionMain","Text","Form","InputForm","BtnForm","onSearchMovie","setSearchParams","useState","setQuery","onSubmit","e","preventDefault","alert","type","autoComplete","onChange","value","target","toLowerCase","trim","useSearchParams","searchParams","setMovies","get","isEmpty","setIsEmpty","error","setError","isLoading","setIsLoading","useEffect","getMoviesBySearchQuery","results","length","message","code","searchName","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","MoviesList"],"sourceRoot":""}